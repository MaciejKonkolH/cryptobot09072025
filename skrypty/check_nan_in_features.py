"""
üî¨ NANO-TEST: AUDYT CZYSTO≈öCI DANYCH
========================================
Test, kt√≥ry weryfikuje hipotezƒô o istnieniu warto≈õci NaN w finalnym
zbiorze cech generowanym przez `feature_calculator.py`.

Cel: Sprawdziƒá, czy dane opuszczajƒÖce modu≈Ç walidacji sƒÖ w 100% czyste.
"""

import os
import sys
import pandas as pd
import numpy as np

def run_test():
    """G≈Ç√≥wna funkcja testujƒÖca"""
    print("üî¨ NANO-TEST: AUDYT CZYSTO≈öCI DANYCH")
    print("=" * 40)

    try:
        # --- KROK 0: Konfiguracja ≈õcie≈ºek ---
        # Ustawia bie≈ºƒÖcy katalog roboczy na g≈Ç√≥wny katalog projektu
        try:
            from pathlib import Path
            script_path = Path(__file__).resolve()
            project_root = script_path.parent.parent
            os.chdir(project_root)
            print(f"‚úÖ Ustawiono katalog roboczy na: {project_root}")
        except NameError:
            print("‚ö†Ô∏è Nie mo≈ºna automatycznie ustawiƒá ≈õcie≈ºki (tryb interaktywny).")
            # Zak≈Çadamy, ≈ºe skrypt jest uruchamiany z g≈Ç√≥wnego katalogu
            if not os.path.exists("validation_and_labeling"):
                print("‚ùå B≈ÇƒÖd: Uruchom skrypt z g≈Ç√≥wnego katalogu projektu.")
                return

        # Dodaj `validation_and_labeling` do ≈õcie≈ºki, aby umo≈ºliwiƒá import
        sys.path.insert(0, os.path.abspath("validation_and_labeling"))
        from feature_calculator import FeatureCalculator
        print("‚úÖ Pomy≈õlnie zaimportowano FeatureCalculator.")

        # --- KROK 1: Za≈Çaduj surowe, zwalidowane dane ---
        input_file = "validation_and_labeling/raw_validated/BTCUSDT_raw_validated.feather"
        print(f"\n1. ≈Åadowanie danych wej≈õciowych z:\n   {input_file}")
        if not os.path.exists(input_file):
            print(f"‚ùå Plik wej≈õciowy nie istnieje! Uruchom najpierw pe≈Çny pipeline walidacji.")
            return

        df_raw_validated = pd.read_feather(input_file)
        # Ustaw 'timestamp' jako indeks, tak jak robi to pipeline
        if 'timestamp' in df_raw_validated.columns:
            df_raw_validated.set_index('timestamp', inplace=True)
        print(f"   ‚úÖ Za≈Çadowano {len(df_raw_validated):,} wierszy.")

        # --- KROK 2: Uruchom FeatureCalculator ---
        print("\n2. Uruchamianie `feature_calculator.calculate_features()`...")
        calculator = FeatureCalculator()
        df_features, report = calculator.calculate_features(df_raw_validated, "BTCUSDT_Test")
        print("   ‚úÖ Obliczanie cech zako≈Ñczone.")

        # --- KROK 3: Sprawd≈∫ warto≈õci NaN ---
        print("\n3. Sprawdzanie obecno≈õci warto≈õci NaN w wynikowym zbiorze cech...")
        nan_sum = df_features.isnull().sum().sum()

        # --- KROK 4: Raport ko≈Ñcowy ---
        print("\n" + "="*20 + " WYNIK TESTU " + "="*20)
        if nan_sum == 0:
            print("‚úÖ HIPOTEZA OBALONA!")
            print("   Modu≈Ç `feature_calculator.py` produkuje dane w 100% czyste.")
            print("   Nie znaleziono ≈ºadnych warto≈õci NaN.")
            print("\n   Wniosek: Problem musi le≈ºeƒá gdzie≈õ indziej, a nie w niesp√≥jnym")
            print("   traktowaniu NaN, poniewa≈º nie ma czego traktowaƒá.")
        else:
            print("‚ùå HIPOTEZA POTWIERDZONA!")
            print(f"   Znaleziono ≈ÇƒÖcznie {nan_sum} warto≈õci NaN w finalnym zbiorze cech.")
            print("\n   Wniosek: Niesp√≥jne traktowanie tych warto≈õci (`fillna(0)` vs `bfill/ffill`)")
            print("   jest zidentyfikowanym ≈∫r√≥d≈Çem rozbie≈ºno≈õci w predykcjach.")
            
            print("\n   Szczeg√≥≈Çy (NaN na kolumnƒô):")
            print(df_features.isnull().sum()[df_features.isnull().sum() > 0])

        print("=" * 53)

    except Exception as e:
        print(f"\n‚ùå WYSTƒÑPI≈Å KRYTYCZNY B≈ÅƒÑD PODCZAS TESTU:")
        print(str(e))
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    run_test() 